snippet header
	cmake_minimum_required(VERSION 2.6)
	project(${1:ProjectName})
snippet mess
	message( STATUS "${0:message}" )

snippet add_custom_command
	add_custom_target( ${TGT_NAME} DEPENDS ${OUTFILE} )
	add_custom_command( OUTPUT ${OUTFILE}
	    COMMAND ${0:command}
	    DEPENDS ${_infile}
	    WORKING_DIRECTORY ${CMAKE_BINARY_DIR}
	    COMMENT "${1:message}"
	    VERBATIM
	    )

snippet cmake
	cmake_minimum_required(VERSION 2.6)
	project(${1:ProjectName})

	find_package(${2:LIBRARY})

	include_directories(
		${$2_INCLUDE_DIR}
	)

	add_subdirectory(${0:src})

	add_executable($1)

	target_link_libraries($1
		${$2_LIBRARIES}
	)

snippet include
	include_directories(
		${${0:INCLUDE_DIR}}
	)

snippet find
	find_package(${0:LIBRARY})

snippet glob
	file(GLOB ${1:SRCS} *.${0:cpp})

snippet subdir
	add_subdirectory(${0:src})

snippet lib
	add_library(${1:lib} ${2:STATIC}
		${${0:SRCS}}
	)

snippet link
	target_link_libraries(${1:bin}
		${0:somelib}
	)

snippet bin
	add_executable(${1:bin})

snippet set
	set(${1:var} ${0:val})

snippet dep
	add_dependencies(${1:target}
		${0:dep}
	)

snippet props
	set_target_properties(${1:target}
		${2:PROPERTIES} ${3:COMPILE_FLAGS}
		${0:"-O3 -Wall -pedantic"}
	)

snippet external_project
	include(ExternalProject)
	ExternalProject_Add(
	   ${1:external_prj_name}
	   PREFIX ${2:${CMAKE_SOURCE_DIR}}/$1
	   SOURCE_DIR  ${3:${CMAKE_SOURCE_DIR}}/$1
	   CONFIGURE_COMMAND $3}/$1/configure --prefix=$3}/$1
	   BUILD_COMMAND ${MAKE}
	   BUILD_IN_SOURCE 1
	) 
	include_directories($3}/$1/include)
	link_directories($3}/$1/lib)
